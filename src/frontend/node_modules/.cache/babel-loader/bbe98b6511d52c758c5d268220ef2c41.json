{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\vince\\\\Code\\\\brainstormy-master\\\\frontend\\\\src\\\\components\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport { GoogleLogin } from 'react-google-login'; // refresh token\n\nimport { refreshTokenSetup } from '../utils/refreshToken';\nimport { Context } from '../Store';\nimport { firebase, db } from './FirebaseConfig';\nconst clientId = '31511364762-af73a2fcq1v6mgufrd5otqem4j5ksdi8.apps.googleusercontent.com'; //insert client id here\n\nfunction Login(props) {\n  _s();\n\n  const [state, dispatch] = useContext(Context);\n  let avaliableCanvasId;\n\n  const onSuccess = res => {\n    console.log('Login Success: currentUser:', res.profileObj); //If new data, assign the canvas Id to the new user\n\n    const setNewData = () => {\n      firebase.database().ref('board/' + res.profileObj.googleId).set({\n        x1: 0,\n        y1: 0,\n        x2: -1,\n        y2: -1,\n        isDrawing: false,\n        colorHexCode: \"#000000\",\n        canvasId: avaliableCanvasId\n      }, error => {\n        alert(`Write failed to ${res.profileObj.googleId}`);\n      });\n      firebase.database().ref('board/currentAvaliableCanvas').set(firebase.database.ServerValue.increment(1));\n      dispatch({\n        type: 'setCanvasId',\n        obj: avaliableCanvasId\n      });\n    }; //If old data, update the data\n\n\n    const updateOldData = () => {\n      firebase.database().ref('board/' + res.profileObj.googleId).update({\n        x1: 0,\n        y1: 0,\n        x2: -1,\n        y2: -1,\n        isDrawing: false,\n        colorHexCode: \"#000000\"\n      });\n    };\n\n    alert(`Logged in successfully! Welcome ${res.profileObj.name} 😍.`);\n    refreshTokenSetup(res);\n    props.setLoggedIn(true);\n    props.setName(res.profileObj.givenName);\n    dispatch({\n      type: 'setObj',\n      obj: res.profileObj\n    });\n    dispatch({\n      type: 'setColorHexCode',\n      obj: \"#000000\"\n    });\n    console.log(\"googleID is  \" + state.googleObj.googleId); //Initialize database data when logged in\n\n    firebase.database().ref('board/' + res.profileObj.googleId).once(\"value\", snapshot => {\n      if (snapshot.exists()) {\n        updateOldData(); //Set global store state canvasId to the canvasId of user\n\n        dispatch({\n          type: 'setCanvasId',\n          obj: snapshot.val().canvasId\n        });\n      } else {\n        //Get the value for currentAvaliable Canvas.  Then setNewData based on the currentAvaliable Canvas\n        firebase.database().ref('board/').once(\"value\", snapshot => {\n          avaliableCanvasId = snapshot.val().currentAvaliableCanvas;\n        }, error => alert(\"undefined\")).then(setNewData).catch(err => alert(err));\n      }\n    });\n  };\n\n  const onFailure = res => {\n    console.log('Login failed: res:', res);\n    alert(`Failed to login 😢. Please try again`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n      clientId: clientId,\n      buttonText: \"Login\",\n      onSuccess: onSuccess,\n      onFailure: onFailure,\n      cookiePolicy: 'single_host_origin',\n      isSignedIn: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Login, \"R/iqDjZuP7G94n7Hryyh+IyzlJk=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/vince/Code/brainstormy-master/frontend/src/components/Login.js"],"names":["React","useState","useContext","GoogleLogin","refreshTokenSetup","Context","firebase","db","clientId","Login","props","state","dispatch","avaliableCanvasId","onSuccess","res","console","log","profileObj","setNewData","database","ref","googleId","set","x1","y1","x2","y2","isDrawing","colorHexCode","canvasId","error","alert","ServerValue","increment","type","obj","updateOldData","update","name","setLoggedIn","setName","givenName","googleObj","once","snapshot","exists","val","currentAvaliableCanvas","then","catch","err","onFailure"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\r\nimport { GoogleLogin } from 'react-google-login';\r\n// refresh token\r\nimport { refreshTokenSetup } from '../utils/refreshToken';\r\nimport { Context } from '../Store'\r\nimport { firebase, db } from './FirebaseConfig'\r\n\r\n\r\nconst clientId = '31511364762-af73a2fcq1v6mgufrd5otqem4j5ksdi8.apps.googleusercontent.com' //insert client id here\r\n\r\nfunction Login(props) {\r\n\r\n  const [state, dispatch] = useContext(Context);\r\n  let avaliableCanvasId;\r\n  const onSuccess = (res) => {\r\n    console.log('Login Success: currentUser:', res.profileObj);\r\n    //If new data, assign the canvas Id to the new user\r\n    const setNewData = () => {\r\n      firebase.database().ref('board/' + res.profileObj.googleId).set({\r\n        x1: 0,\r\n        y1: 0,\r\n        x2: -1,\r\n        y2: -1,\r\n        isDrawing: false,\r\n        colorHexCode: \"#000000\",\r\n        canvasId: avaliableCanvasId\r\n      }, (error) => { alert(`Write failed to ${res.profileObj.googleId}`) })\r\n      firebase.database().ref('board/currentAvaliableCanvas').set(firebase.database.ServerValue.increment(1))\r\n      dispatch({ type: 'setCanvasId', obj: avaliableCanvasId });\r\n    }\r\n    //If old data, update the data\r\n    const updateOldData = () => {\r\n      firebase.database().ref('board/' + res.profileObj.googleId).update({\r\n        x1: 0,\r\n        y1: 0,\r\n        x2: -1,\r\n        y2: -1,\r\n        isDrawing: false,\r\n        colorHexCode: \"#000000\",\r\n      })\r\n    }\r\n    alert(\r\n      `Logged in successfully! Welcome ${res.profileObj.name} 😍.`\r\n    );\r\n    refreshTokenSetup(res);\r\n    props.setLoggedIn(true);\r\n    props.setName(res.profileObj.givenName)\r\n    dispatch({ type: 'setObj', obj: res.profileObj });\r\n    dispatch({ type: 'setColorHexCode', obj: \"#000000\" });\r\n    console.log(\"googleID is  \" + state.googleObj.googleId)\r\n\r\n    //Initialize database data when logged in\r\n    firebase.database().ref('board/' + res.profileObj.googleId).once(\"value\", snapshot => {\r\n      if (snapshot.exists()) {\r\n        updateOldData();\r\n        //Set global store state canvasId to the canvasId of user\r\n        dispatch({ type: 'setCanvasId', obj: snapshot.val().canvasId });\r\n      } else {\r\n        //Get the value for currentAvaliable Canvas.  Then setNewData based on the currentAvaliable Canvas\r\n        firebase.database().ref('board/').once(\"value\", (snapshot) => {\r\n          avaliableCanvasId = snapshot.val().currentAvaliableCanvas;\r\n        }, (error) => alert(\"undefined\")).then(setNewData).catch((err) => alert(err))\r\n      }\r\n    })\r\n  };\r\n\r\n  const onFailure = (res) => {\r\n    console.log('Login failed: res:', res);\r\n    alert(\r\n      `Failed to login 😢. Please try again`\r\n    );\r\n  };\r\n\r\n  return (\r\n\r\n    <div>\r\n      <GoogleLogin\r\n        clientId={clientId}\r\n        buttonText=\"Login\"\r\n        onSuccess={onSuccess}\r\n        onFailure={onFailure}\r\n        cookiePolicy={'single_host_origin'}\r\n        isSignedIn={true}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}