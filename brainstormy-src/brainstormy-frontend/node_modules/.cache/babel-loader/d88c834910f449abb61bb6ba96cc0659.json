{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\vince\\\\Code\\\\brainstormy-master\\\\src\\\\frontend\\\\src\\\\components\\\\Canvas.js\",\n    _s = $RefreshSig$();\n\nimport { render } from '@testing-library/react';\nimport React, { useState, useEffect, useRef, useLayoutEffect, useContext, useCallback } from 'react';\nimport ColorPicker from './ColorPicker';\nimport { firebase, db } from './FirebaseConfig';\nimport { Context } from '../Store';\nimport axios from \"axios\";\n/* Followed tutorial by Maksim Ivanov (thank you) https://www.youtube.com/watch?v=FLESHMJ-bI0&t=189s */\n//Pass 2 props: height and width\n\nfunction Canvas(props) {\n  _s();\n\n  const canvasRef = useRef([]); //Create Ref object to canvas\n\n  const backgroundCanvasRef = useRef(); //Create Ref object to background canvas\n\n  const contextRef = useRef(null); //Create Ref object to context\n\n  const parentRef = useRef(null); //Create Ref object to parent component\n\n  const [isDrawing, setIsDrawing] = useState(false); //isDrawing State\n\n  const [CanDraw, setCanDraw] = useState(false); //canDraw is toggled by the draw button and allows user to draw.\n\n  const [buttonStr, setButtonStr] = useState('Draw'); //The string on the draw button\n\n  const [someoneIsDrawing, setSomeoneIsDrawing] = useState(false); //Lets the server know if someone is drawing\n\n  const [prevMouseX, setPrevMouseX] = useState(0); //Previous mouse X coordinate for the server\n\n  const [prevMouseY, setPrevMouseY] = useState(0); //Previous mouse Y coordinate for the server\n\n  const [state, dispatch] = useContext(Context); //Global state containing profile object and hexColor\n\n  const [testState, setTestState] = useState(0);\n  const [canvasLayers, setCanvasLayers] = useState([\"canvas0\", \"canvas1\", \"canvas2\", \"canvas3\", \"canvas4\", \"canvas5\", \"canvas6\", \"canvas7\", \"canvas8\", \"canvas9\", \"canvas10\", \"canvas11\", \"canvas12\", \"canvas13\", \"canvas14\", \"canvas15\", \"canvas16\", \"canvas17\", \"canvas18\", \"canvas19\"]);\n  const [contextArr, setContextArr] = useState([]);\n  const numberOfCanvases = 5;\n  let localContext;\n  useEffect(() => {\n    if (contextRef.current) {\n      contextRef.current.strokeStyle = state.colorHexCode;\n    }\n  }, [state.colorHexCode]); //Sets up the canvas\n\n  useEffect(() => {\n    console.log(props.uid); //Sets the width and height of all the canvases\n\n    for (let i = 0; i < numberOfCanvases; i++) {\n      if (canvasRef.current[i]) {\n        console.log(canvasRef.current[i]);\n        canvasRef.current[i].width = props.width * 2;\n        canvasRef.current[i].height = props.height * 2;\n        canvasRef.current[i].style.width = `${props.width}px`;\n        canvasRef.current[i].style.height = `${props.height}px`;\n      }\n    } //Sets up the Background Canvas\n\n\n    backgroundCanvasRef.current.width = props.width * 2;\n    backgroundCanvasRef.current.height = props.height * 2;\n    backgroundCanvasRef.current.style.width = `${props.width}px`;\n    backgroundCanvasRef.current.style.height = `${props.height}px`; //Sets the constant properties of 2d context\n\n    let temp = [];\n\n    for (let i = 0; i < numberOfCanvases; i++) {\n      let tempCtx = canvasRef.current[i].getContext('2d');\n      tempCtx.scale(2, 2);\n      tempCtx.lineCap = 'round';\n      tempCtx.strokeStyle = 'black';\n      tempCtx.lineWidth = 10;\n      temp.push(tempCtx);\n    }\n\n    setContextArr(temp);\n    console.log(contextArr); //Assigns the localContext the local client can draw on\n\n    if (contextArr[props.canvasId]) {\n      localContext = contextArr[props.canvasId]; //gets the 2d context\n\n      localContext.strokeStyle = state.colorHexCode;\n    }\n\n    contextRef.current = localContext; // Firebase On Draw Event\n\n    firebase.database().ref('board/').on('value', snapshot => {\n      if (snapshot.exists()) {\n        let b = false;\n        snapshot.forEach(child => {\n          if (child.val().isDrawing) {\n            b = true; // console.log(\"Props.uid: \" + props.uid);\n            // console.log(\"child.key: \" + child.key);\n\n            console.log(\"boolean val: \" + (props.uid === child.key));\n\n            if (props.uid === child.key) {\n              return 0;\n            }\n\n            if (contextArr[child.val().canvasId] == null) {\n              console.log(\"canvasRef is null for \" + child.val().canvasId);\n              console.log(canvasRef.current[1]);\n              return;\n            }\n\n            let ctx = contextArr[child.val().canvasId];\n            let backgroundContext = backgroundCanvasRef.current.getContext('2d');\n            ctx.strokeStyle = child.val().colorHexCode;\n            ctx.beginPath();\n            ctx.moveTo(child.val().x1, child.val().y1);\n            ctx.lineTo(child.val().x2, child.val().y2);\n            ctx.stroke();\n            ctx.closePath();\n            backgroundContext.drawImage(canvasRef.current[child.val().canvasId], 0, 0);\n            ctx.clearRect(0, 0, props.width * 2, props.height * 2);\n            console.log(\"written\");\n          }\n        });\n\n        if (b) {\n          setSomeoneIsDrawing(true);\n        } else {\n          setSomeoneIsDrawing(false);\n        }\n      } else {\n        console.log('No data available');\n      }\n    });\n  }, [props.width, props.height, canvasRef, testState]);\n\n  const writeCoordinates = async (mouseX, mouseY, prevMouseX, prevMouseY) => {\n    console.log(\"Writing Coordinates\"); //Writes data to firebase\n\n    if (!isDrawing) {\n      firebase.database().ref('board/' + props.uid).update({\n        x1: mouseX,\n        y1: mouseY,\n        x2: mouseX,\n        y2: mouseY\n      });\n    } else {\n      firebase.database().ref('board/' + props.uid).update({\n        x1: prevMouseX,\n        y1: prevMouseY,\n        x2: mouseX,\n        y2: mouseY\n      });\n    }\n  };\n\n  const writeIsDrawing = b => {\n    //Writes data to firebase\n    firebase.database().ref('board/' + props.uid).update({\n      isDrawing: b\n    }, error => {\n      if (error) {\n        console.log('writeNotDrawing Failed');\n      }\n    });\n  };\n\n  const startDrawing = async ({\n    nativeEvent\n  }) => {\n    if (!CanDraw) {\n      console.log(\"cant draw\");\n      return;\n    }\n\n    console.log(\"start\");\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY); //Begins path at current mouse Position\n\n    await writeCoordinates(offsetX, offsetY, 0, 0);\n    setPrevMouseX(offsetX);\n    setPrevMouseY(offsetY);\n    setIsDrawing(true);\n    writeIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    let backgroundContext = backgroundCanvasRef.current.getContext('2d');\n    backgroundContext.drawImage(canvasRef.current[props.canvasId], 0, 0);\n    contextRef.current.clearRect(0, 0, props.width, props.height);\n    setIsDrawing(false);\n    writeIsDrawing(false);\n  };\n\n  const draw = async ({\n    nativeEvent\n  }) => {\n    if (!isDrawing || !CanDraw) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    await writeCoordinates(offsetX, offsetY, prevMouseX, prevMouseY);\n    setPrevMouseX(offsetX);\n    setPrevMouseY(offsetY);\n    contextRef.current.lineTo(offsetX, offsetY); //Moves path to current mouse Position\n\n    contextRef.current.stroke(); //Renders the Stroke\n    // let backgroundContext = backgroundCanvasRef.current.getContext('2d');\n    // backgroundContext.drawImage(canvasRef.current[props.canvasId],0,0);\n    // contextRef.current.clearRect(0, 0, props.width*2, props.height*2);\n  };\n\n  const clickHandlerDraw = () => {\n    if (!CanDraw) {\n      console.log(\"Can draw\");\n      setCanDraw(true);\n      setButtonStr('Stop Draw');\n    } else {\n      setCanDraw(false);\n      setButtonStr('Draw');\n    }\n  };\n\n  const clickHandlerClear = () => {\n    //clears the background canvas\n    let backgroundContext = backgroundCanvasRef.current.getContext('2d');\n    console.log(props.width + \" _____ \" + props.height);\n    backgroundContext.clearRect(0, 0, 2 * props.width, 2 * props.height);\n  };\n\n  const clickHandlerShare = async () => {\n    //Sends a Post request to write in database\n    var image = backgroundCanvasRef.current.toDataURL(\"image/png\");\n    let res = await axios.post(\"http://localhost:8080/gallery\", {\n      Image: image\n    });\n    alert(`Failed to login ðŸ˜¢. Please try again`);\n    console.log(res.data);\n  }; // const test = () => {\n  //     console.log(\"test1\");\n  //     if (canvasRef.current[4]) {\n  //         console.log(\"test2\");\n  //         let ctx = backgroundCanvasRef.current.getContext('2d');\n  //         ctx.beginPath();\n  //         ctx.rect(20, 20, 150, 100);\n  //         ctx.stroke();\n  //         console.log(\"test3\");\n  //     }\n  // }\n  // const test2 = () => {\n  //     console.log(\"rerendered\")\n  //     setTestState(testState => !testState);\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        onMouseDown: startDrawing,\n        onMouseUp: finishDrawing,\n        onMouseMove: draw,\n        ref: a => canvasRef.current[props.canvasId] = a,\n        id: \"canvas\" + props.canvasId,\n        style: {\n          position: \"absolute\",\n          left: 0,\n          top: 0,\n          zIndex: 100\n        }\n      }, props.canvasId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this), canvasLayers.map((layer, key) => {\n        return key == props.canvasId ? null : /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: a => canvasRef.current[key] = a,\n          id: layer,\n          style: {\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            zIndex: key\n          }\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 25\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: backgroundCanvasRef,\n        id: \"backgroundCanvas\",\n        style: {\n          position: \"absolute\",\n          left: 0,\n          top: 0,\n          zIndex: 0\n        }\n      }, -1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: props.width,\n        height: props.height\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: clickHandlerDraw,\n        children: buttonStr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '50px',\n          height: 'auto',\n          display: 'inline-block'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: clickHandlerClear,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '50px',\n          height: 'auto',\n          display: 'inline-block'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: clickHandlerShare,\n        children: \"Share\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: someoneIsDrawing ? 'Someone is Drawing' : 'No one is Drawing'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ColorPicker, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Canvas, \"3yd+g9TNd2lKNCZlk6R0oAaBEWU=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["C:/Users/vince/Code/brainstormy-master/src/frontend/src/components/Canvas.js"],"names":["render","React","useState","useEffect","useRef","useLayoutEffect","useContext","useCallback","ColorPicker","firebase","db","Context","axios","Canvas","props","canvasRef","backgroundCanvasRef","contextRef","parentRef","isDrawing","setIsDrawing","CanDraw","setCanDraw","buttonStr","setButtonStr","someoneIsDrawing","setSomeoneIsDrawing","prevMouseX","setPrevMouseX","prevMouseY","setPrevMouseY","state","dispatch","testState","setTestState","canvasLayers","setCanvasLayers","contextArr","setContextArr","numberOfCanvases","localContext","current","strokeStyle","colorHexCode","console","log","uid","i","width","height","style","temp","tempCtx","getContext","scale","lineCap","lineWidth","push","canvasId","database","ref","on","snapshot","exists","b","forEach","child","val","key","ctx","backgroundContext","beginPath","moveTo","x1","y1","lineTo","x2","y2","stroke","closePath","drawImage","clearRect","writeCoordinates","mouseX","mouseY","update","writeIsDrawing","error","startDrawing","nativeEvent","offsetX","offsetY","finishDrawing","draw","clickHandlerDraw","clickHandlerClear","clickHandlerShare","image","toDataURL","res","post","Image","alert","data","position","a","left","top","zIndex","map","layer","display"],"mappings":"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","sourcesContent":["import { render } from '@testing-library/react';\r\nimport React, { useState, useEffect, useRef, useLayoutEffect, useContext, useCallback } from 'react';\r\nimport ColorPicker from './ColorPicker';\r\nimport { firebase, db } from './FirebaseConfig';\r\nimport { Context } from '../Store';\r\nimport axios from \"axios\";\r\n/* Followed tutorial by Maksim Ivanov (thank you) https://www.youtube.com/watch?v=FLESHMJ-bI0&t=189s */\r\n\r\n//Pass 2 props: height and width\r\nfunction Canvas(props) {\r\n    const canvasRef = useRef([]); //Create Ref object to canvas\r\n    const backgroundCanvasRef = useRef(); //Create Ref object to background canvas\r\n    const contextRef = useRef(null); //Create Ref object to context\r\n    const parentRef = useRef(null); //Create Ref object to parent component\r\n    const [isDrawing, setIsDrawing] = useState(false); //isDrawing State\r\n    const [CanDraw, setCanDraw] = useState(false);   //canDraw is toggled by the draw button and allows user to draw.\r\n    const [buttonStr, setButtonStr] = useState('Draw');  //The string on the draw button\r\n    const [someoneIsDrawing, setSomeoneIsDrawing] = useState(false);  //Lets the server know if someone is drawing\r\n    const [prevMouseX, setPrevMouseX] = useState(0); //Previous mouse X coordinate for the server\r\n    const [prevMouseY, setPrevMouseY] = useState(0); //Previous mouse Y coordinate for the server\r\n    const [state, dispatch] = useContext(Context); //Global state containing profile object and hexColor\r\n    const [testState, setTestState] = useState(0);\r\n    const [canvasLayers, setCanvasLayers] = useState([\"canvas0\", \"canvas1\", \"canvas2\", \"canvas3\", \"canvas4\", \"canvas5\", \"canvas6\", \"canvas7\", \"canvas8\", \"canvas9\", \"canvas10\", \"canvas11\", \"canvas12\", \"canvas13\", \"canvas14\", \"canvas15\", \"canvas16\", \"canvas17\", \"canvas18\", \"canvas19\"]);\r\n    const [contextArr,setContextArr] = useState([])\r\n    const numberOfCanvases = 5;\r\n\r\n    let localContext;\r\n    useEffect(() => {\r\n        if (contextRef.current) {\r\n            contextRef.current.strokeStyle = state.colorHexCode;\r\n        }\r\n    }, [state.colorHexCode]);\r\n\r\n\r\n    //Sets up the canvas\r\n    useEffect(() => {\r\n\r\n        console.log(props.uid)\r\n\r\n        //Sets the width and height of all the canvases\r\n        for (let i = 0; i < numberOfCanvases; i++) {\r\n            if (canvasRef.current[i]) {\r\n                console.log(canvasRef.current[i]);\r\n                canvasRef.current[i].width = props.width * 2;\r\n                canvasRef.current[i].height = props.height * 2;\r\n                canvasRef.current[i].style.width = `${props.width}px`;\r\n                canvasRef.current[i].style.height = `${props.height}px`;\r\n\r\n            }\r\n        }\r\n        //Sets up the Background Canvas\r\n        backgroundCanvasRef.current.width = props.width * 2;\r\n        backgroundCanvasRef.current.height = props.height * 2;\r\n        backgroundCanvasRef.current.style.width = `${props.width}px`;\r\n        backgroundCanvasRef.current.style.height = `${props.height}px`;\r\n        \r\n        //Sets the constant properties of 2d context\r\n        let temp = [];\r\n        for(let i = 0; i < numberOfCanvases; i++){\r\n            let tempCtx = canvasRef.current[i].getContext('2d');\r\n            tempCtx.scale(2,2);\r\n            tempCtx.lineCap = 'round';\r\n            tempCtx.strokeStyle = 'black';\r\n            tempCtx.lineWidth = 10;\r\n            temp.push(tempCtx);\r\n        }\r\n        setContextArr(temp);\r\n        console.log(contextArr);\r\n\r\n        //Assigns the localContext the local client can draw on\r\n        if(contextArr[props.canvasId]){\r\n            localContext = contextArr[props.canvasId]; //gets the 2d context\r\n            localContext.strokeStyle = state.colorHexCode;\r\n    \r\n        }\r\n        \r\n        contextRef.current = localContext\r\n\r\n        // Firebase On Draw Event\r\n        firebase\r\n            .database()\r\n            .ref('board/')\r\n            .on('value', (snapshot) => {\r\n                if (snapshot.exists()) {\r\n                    let b = false;\r\n                    snapshot.forEach((child) => {\r\n                        if (child.val().isDrawing) {\r\n                            b = true;\r\n                            // console.log(\"Props.uid: \" + props.uid);\r\n                            // console.log(\"child.key: \" + child.key);\r\n                            console.log(\"boolean val: \" + (props.uid === child.key));\r\n                            if (props.uid === child.key) {\r\n                                return 0;\r\n                            }\r\n                            if (contextArr[child.val().canvasId] == null) {\r\n                                console.log(\"canvasRef is null for \" + child.val().canvasId);\r\n                                console.log(canvasRef.current[1])\r\n                                return;\r\n                            }\r\n\r\n                            let ctx = contextArr[child.val().canvasId];\r\n                            let backgroundContext = backgroundCanvasRef.current.getContext('2d');\r\n                            ctx.strokeStyle = child.val().colorHexCode;\r\n                            ctx.beginPath();\r\n                            ctx.moveTo(child.val().x1, child.val().y1);\r\n                            ctx.lineTo(child.val().x2, child.val().y2);\r\n                            ctx.stroke();\r\n                            ctx.closePath();\r\n                            backgroundContext.drawImage(canvasRef.current[child.val().canvasId],0,0);\r\n                            ctx.clearRect(0,0,props.width * 2, props.height * 2);\r\n                            console.log(\"written\");\r\n                        }\r\n                    });\r\n                    if (b) {\r\n                        setSomeoneIsDrawing(true);\r\n                    } else {\r\n                        setSomeoneIsDrawing(false);\r\n                    }\r\n                } else {\r\n                    console.log('No data available');\r\n                }\r\n            });\r\n    }, [props.width, props.height, canvasRef, testState]);\r\n\r\n    const writeCoordinates = async (mouseX, mouseY, prevMouseX, prevMouseY) => {\r\n        console.log(\"Writing Coordinates\");\r\n        //Writes data to firebase\r\n        if (!isDrawing) {\r\n            firebase\r\n                .database()\r\n                .ref('board/' + props.uid)\r\n                .update({\r\n                    x1: mouseX,\r\n                    y1: mouseY,\r\n                    x2: mouseX,\r\n                    y2: mouseY,\r\n                });\r\n        } else {\r\n            firebase\r\n                .database()\r\n                .ref('board/' + props.uid)\r\n                .update({\r\n                    x1: prevMouseX,\r\n                    y1: prevMouseY,\r\n                    x2: mouseX,\r\n                    y2: mouseY,\r\n                });\r\n        }\r\n    };\r\n    const writeIsDrawing = (b) => {\r\n        //Writes data to firebase\r\n        firebase\r\n            .database()\r\n            .ref('board/' + props.uid)\r\n            .update(\r\n                {\r\n                    isDrawing: b,\r\n                },\r\n                (error) => {\r\n                    if (error) {\r\n                        console.log('writeNotDrawing Failed');\r\n                    }\r\n                }\r\n            );\r\n    };\r\n    const startDrawing = async ({ nativeEvent }) => {\r\n        if (!CanDraw) {\r\n            console.log(\"cant draw\")\r\n            return;\r\n        }\r\n        console.log(\"start\")\r\n        const { offsetX, offsetY } = nativeEvent;\r\n        contextRef.current.beginPath();\r\n        contextRef.current.moveTo(offsetX, offsetY); //Begins path at current mouse Position\r\n        await writeCoordinates(offsetX, offsetY, 0, 0);\r\n        setPrevMouseX(offsetX);\r\n        setPrevMouseY(offsetY);\r\n\r\n        setIsDrawing(true);\r\n        writeIsDrawing(true);\r\n    };\r\n    const finishDrawing = () => {\r\n        contextRef.current.closePath();\r\n        let backgroundContext = backgroundCanvasRef.current.getContext('2d');\r\n        backgroundContext.drawImage(canvasRef.current[props.canvasId],0,0);\r\n        contextRef.current.clearRect(0, 0, props.width, props.height);\r\n        setIsDrawing(false);\r\n        writeIsDrawing(false);\r\n    };\r\n\r\n    const draw = async ({ nativeEvent }) => {\r\n        if (!isDrawing || !CanDraw) {\r\n            return;\r\n        }\r\n        const { offsetX, offsetY } = nativeEvent;\r\n        \r\n        await writeCoordinates(offsetX, offsetY, prevMouseX, prevMouseY);\r\n\r\n        setPrevMouseX(offsetX);\r\n        setPrevMouseY(offsetY);\r\n        contextRef.current.lineTo(offsetX, offsetY); //Moves path to current mouse Position\r\n        contextRef.current.stroke(); //Renders the Stroke\r\n        // let backgroundContext = backgroundCanvasRef.current.getContext('2d');\r\n        // backgroundContext.drawImage(canvasRef.current[props.canvasId],0,0);\r\n        // contextRef.current.clearRect(0, 0, props.width*2, props.height*2);\r\n    };\r\n    const clickHandlerDraw = () => {\r\n\r\n        if (!CanDraw) {\r\n            console.log(\"Can draw\")\r\n            setCanDraw(true);\r\n            setButtonStr('Stop Draw');\r\n        } else {\r\n            setCanDraw(false);\r\n            setButtonStr('Draw');\r\n        }\r\n    };\r\n    const clickHandlerClear = () => { //clears the background canvas\r\n        let backgroundContext = backgroundCanvasRef.current.getContext('2d');\r\n        console.log(props.width + \" _____ \" + props.height)\r\n        backgroundContext.clearRect(0, 0, 2*props.width, 2*props.height);\r\n    };\r\n    const clickHandlerShare = async () => { //Sends a Post request to write in database\r\n        var image = backgroundCanvasRef.current.toDataURL(\"image/png\"); \r\n        \r\n        let res = await axios.post(\"http://localhost:8080/gallery\", {\r\n            Image: image,\r\n          });\r\n          alert(\r\n            `Failed to login ðŸ˜¢. Please try again`\r\n          );\r\n          \r\n        console.log(res.data);\r\n    };\r\n    // const test = () => {\r\n    //     console.log(\"test1\");\r\n    //     if (canvasRef.current[4]) {\r\n    //         console.log(\"test2\");\r\n    //         let ctx = backgroundCanvasRef.current.getContext('2d');\r\n    //         ctx.beginPath();\r\n    //         ctx.rect(20, 20, 150, 100);\r\n    //         ctx.stroke();\r\n    //         console.log(\"test3\");\r\n    //     }\r\n    // }\r\n    // const test2 = () => {\r\n    //     console.log(\"rerendered\")\r\n    //     setTestState(testState => !testState);\r\n    // }\r\n    \r\n    return (\r\n        <div>\r\n            <div style={{ position: 'relative' }}>\r\n                <canvas\r\n                    onMouseDown={startDrawing}\r\n                    onMouseUp={finishDrawing}\r\n                    onMouseMove={draw}\r\n                    ref={a => canvasRef.current[props.canvasId] = a}\r\n                    id={\"canvas\" + props.canvasId}\r\n                    key={props.canvasId}\r\n                    style={{ position: \"absolute\", left: 0, top: 0, zIndex: 100 }}\r\n                />\r\n                {canvasLayers.map((layer, key) => {\r\n                    return key == props.canvasId ?\r\n                        null\r\n                        :\r\n                        <canvas\r\n                            ref={a => canvasRef.current[key] = a}\r\n                            id={layer}\r\n                            style={{ position: \"absolute\", left: 0, top: 0, zIndex: key }}\r\n                            key={key} />\r\n                })}\r\n                <canvas\r\n                    ref={backgroundCanvasRef}\r\n                    id={\"backgroundCanvas\"}\r\n                    key={-1}\r\n                    style={{ position: \"absolute\", left: 0, top: 0, zIndex: 0 }}\r\n                />\r\n            </div>\r\n            <div style={{ width: props.width, height: props.height }} />\r\n            <div>\r\n                <button type=\"button\" onClick={clickHandlerDraw}>{buttonStr}</button>\r\n                <div style={{ width: '50px', height: 'auto', display: 'inline-block' }} />\r\n                <button type=\"button\" onClick={clickHandlerClear}>Clear</button>\r\n                <div style={{ width: '50px', height: 'auto', display: 'inline-block' }} />\r\n                <button type=\"button\" onClick={clickHandlerShare}>Share</button>\r\n                {/* <button type=\"button\" onClick={test}>Test</button>\r\n                <button type=\"button\" onClick={test2}>ReRender</button> */}\r\n            </div>\r\n            <div>{someoneIsDrawing ? 'Someone is Drawing' : 'No one is Drawing'}</div>\r\n            <div>\r\n                <ColorPicker />\r\n            </div>\r\n            {/* <div>\r\n                <img id='testImg' src=''></img>\r\n            </div> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Canvas;\r\n"]},"metadata":{},"sourceType":"module"}